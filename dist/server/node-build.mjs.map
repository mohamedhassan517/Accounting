{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/store/auth.ts","../../server/routes/auth.ts","../../server/routes/users.ts","../../server/lib/supabase.ts","../../server/routes/admin-users.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import crypto from \"node:crypto\";\nimport type { Role, User, UserWithPassword } from \"@shared/api\";\n\n// In-memory stores (non-persistent)\nconst users = new Map<string, UserWithPassword>();\nconst sessions = new Map<string, string>(); // token -> userId\n\nfunction seed() {\n  if (users.size === 0) {\n    const id = crypto.randomUUID();\n    const manager: UserWithPassword = {\n      id,\n      username: \"root\",\n      name: \"Manager\",\n      email: \"admin@example.com\",\n      role: \"manager\",\n      active: true,\n      password: \"password123\",\n    };\n    users.set(id, manager);\n  }\n}\nseed();\n\nexport function authenticate(username: string, password: string) {\n  for (const user of users.values()) {\n    if (user.username === username && user.password === password && user.active) {\n      const token = crypto.randomUUID();\n      sessions.set(token, user.id);\n      const { password: _pw, ...safe } = user;\n      return { token, user: safe } as { token: string; user: User };\n    }\n  }\n  return null;\n}\n\nexport function getUserByToken(token?: string | null): User | null {\n  if (!token) return null;\n  const userId = sessions.get(token);\n  if (!userId) return null;\n  const u = users.get(userId);\n  if (!u) return null;\n  const { password: _pw, ...safe } = u;\n  return safe;\n}\n\nexport function invalidateToken(token: string) {\n  sessions.delete(token);\n}\n\nexport function requireManager(token?: string | null): User | null {\n  const user = getUserByToken(token ?? null);\n  if (!user) return null;\n  if (user.role !== \"manager\") return null;\n  return user;\n}\n\nexport function listUsers(): User[] {\n  return Array.from(users.values()).map(({ password: _pw, ...u }) => u);\n}\n\nexport function createUser(input: {\n  username: string;\n  name: string;\n  email: string;\n  role: Role;\n  password: string;\n  active?: boolean;\n}): User {\n  const id = crypto.randomUUID();\n  const user: UserWithPassword = {\n    id,\n    username: input.username,\n    name: input.name,\n    email: input.email,\n    role: input.role,\n    active: input.active ?? true,\n    password: input.password,\n  };\n  users.set(id, user);\n  const { password: _pw, ...safe } = user;\n  return safe;\n}\n\nexport function updateUser(id: string, patch: Partial<Omit<UserWithPassword, \"id\" | \"username\">> & { password?: string }) {\n  const existing = users.get(id);\n  if (!existing) return null;\n  const updated: UserWithPassword = {\n    ...existing,\n    ...patch,\n  };\n  users.set(id, updated);\n  const { password: _pw, ...safe } = updated;\n  return safe as User;\n}\n\nexport function deleteUser(id: string) {\n  return users.delete(id);\n}\n","import { RequestHandler } from \"express\";\nimport { authenticate, getUserByToken, invalidateToken } from \"../store/auth\";\nimport type { AuthLoginRequest, AuthLoginResponse, AuthMeResponse, ApiError } from \"@shared/api\";\n\nexport const loginHandler: RequestHandler = (req, res) => {\n  const { username, password } = req.body as AuthLoginRequest;\n  if (!username || !password) {\n    res.status(400).json({ error: \"Missing credentials\" } as ApiError);\n    return;\n  }\n  const result = authenticate(username, password);\n  if (!result) {\n    res.status(401).json({ error: \"Invalid credentials or inactive user\" } as ApiError);\n    return;\n  }\n  res.json(result as AuthLoginResponse);\n};\n\nexport const meHandler: RequestHandler = (req, res) => {\n  const token = getTokenFromHeader(req.headers.authorization);\n  const user = getUserByToken(token);\n  res.json({ user } as AuthMeResponse);\n};\n\nexport const logoutHandler: RequestHandler = (req, res) => {\n  const token = getTokenFromHeader(req.headers.authorization);\n  if (token) invalidateToken(token);\n  res.status(204).end();\n};\n\nfunction getTokenFromHeader(auth?: string) {\n  if (!auth) return null;\n  const [type, token] = auth.split(\" \");\n  if (type !== \"Bearer\") return null;\n  return token ?? null;\n}\n\nexport function extractToken(auth?: string) {\n  return getTokenFromHeader(auth);\n}\n","import { RequestHandler } from \"express\";\nimport { createUser, deleteUser, listUsers, requireManager, updateUser } from \"../store/auth\";\nimport type { ApiError, UserCreateRequest, UserUpdateRequest, UsersListResponse } from \"@shared/api\";\nimport { extractToken } from \"./auth\";\n\nexport const listUsersHandler: RequestHandler = (req, res) => {\n  const token = extractToken(req.headers.authorization);\n  const manager = requireManager(token);\n  if (!manager) {\n    res.status(403).json({ error: \"Forbidden\" } as ApiError);\n    return;\n  }\n  res.json({ users: listUsers() } as UsersListResponse);\n};\n\nexport const createUserHandler: RequestHandler = (req, res) => {\n  const token = extractToken(req.headers.authorization);\n  const manager = requireManager(token);\n  if (!manager) {\n    res.status(403).json({ error: \"Forbidden\" } as ApiError);\n    return;\n  }\n  const body = req.body as UserCreateRequest;\n  if (!body.username || !body.password || !body.name || !body.email || !body.role) {\n    res.status(400).json({ error: \"Missing required fields\" } as ApiError);\n    return;\n  }\n  const user = createUser(body);\n  res.status(201).json(user);\n};\n\nexport const updateUserHandler: RequestHandler = (req, res) => {\n  const token = extractToken(req.headers.authorization);\n  const manager = requireManager(token);\n  if (!manager) {\n    res.status(403).json({ error: \"Forbidden\" } as ApiError);\n    return;\n  }\n  const id = req.params.id;\n  const patch = req.body as UserUpdateRequest;\n  const updated = updateUser(id, patch);\n  if (!updated) {\n    res.status(404).json({ error: \"User not found\" } as ApiError);\n    return;\n  }\n  res.json(updated);\n};\n\nexport const deleteUserHandler: RequestHandler = (req, res) => {\n  const token = extractToken(req.headers.authorization);\n  const manager = requireManager(token);\n  if (!manager) {\n    res.status(403).json({ error: \"Forbidden\" } as ApiError);\n    return;\n  }\n  const id = req.params.id;\n  const ok = deleteUser(id);\n  if (!ok) {\n    res.status(404).json({ error: \"User not found\" } as ApiError);\n    return;\n  }\n  res.status(204).end();\n};\n","import { createClient } from '@supabase/supabase-js';\n\nconst url = process.env.SUPABASE_URL as string;\nconst serviceKey = process.env.SUPABASE_SERVICE_ROLE as string;\n\nif (!url || !serviceKey) {\n  // eslint-disable-next-line no-console\n  console.warn('[supabase] Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE');\n}\n\nexport const supabaseAdmin = url && serviceKey\n  ? createClient(url, serviceKey, { auth: { autoRefreshToken: false, persistSession: false } })\n  : null;\n","import { RequestHandler } from 'express';\nimport { supabaseAdmin } from '../lib/supabase';\nimport type { ApiError, Role, User, UserCreateRequest, UserUpdateRequest, UsersListResponse } from '@shared/api';\nimport { extractToken } from './auth';\nimport { requireManager } from '../store/auth';\n\nfunction ensureSupabase(res: any) {\n  if (!supabaseAdmin) {\n    res.status(500).json({ error: 'Supabase not configured' } as ApiError);\n    return false;\n  }\n  return true;\n}\n\nexport const adminListUsers: RequestHandler = async (req, res) => {\n  const token = extractToken(req.headers.authorization);\n  const manager = requireManager(token);\n  if (!manager) return res.status(403).json({ error: 'Forbidden' } as ApiError);\n  if (!ensureSupabase(res)) return;\n\n  const { data, error } = await supabaseAdmin!.from('user_profiles').select('*').order('created_at', { ascending: false });\n  if (error) return res.status(500).json({ error: error.message } as ApiError);\n  const users: User[] = (data || []).map((r: any) => ({ id: r.user_id, username: r.name, name: r.name, email: r.email, role: r.role as Role, active: r.active }));\n  res.json({ users } as UsersListResponse);\n};\n\nexport const adminCreateUser: RequestHandler = async (req, res) => {\n  const token = extractToken(req.headers.authorization);\n  const manager = requireManager(token);\n  if (!manager) return res.status(403).json({ error: 'Forbidden' } as ApiError);\n  if (!ensureSupabase(res)) return;\n\n  const body = req.body as UserCreateRequest;\n  if (!body.email || !body.password || !body.role || !body.name) return res.status(400).json({ error: 'Missing fields' } as ApiError);\n\n  const { data: created, error: cErr } = await supabaseAdmin!.auth.admin.createUser({ email: body.email, password: body.password, email_confirm: true });\n  if (cErr || !created.user) return res.status(500).json({ error: cErr?.message || 'createUser failed' } as ApiError);\n\n  const { error: iErr } = await supabaseAdmin!.from('user_profiles').insert({ user_id: created.user.id, name: body.name || body.username, email: body.email, role: body.role, active: body.active ?? true });\n  if (iErr) return res.status(500).json({ error: iErr.message } as ApiError);\n\n  const user: User = { id: created.user.id, username: body.name || body.username, name: body.name || body.username, email: body.email, role: body.role, active: body.active ?? true };\n  res.status(201).json(user);\n};\n\nexport const adminUpdateUser: RequestHandler = async (req, res) => {\n  const token = extractToken(req.headers.authorization);\n  const manager = requireManager(token);\n  if (!manager) return res.status(403).json({ error: 'Forbidden' } as ApiError);\n  if (!ensureSupabase(res)) return;\n\n  const id = req.params.id;\n  const patch = req.body as UserUpdateRequest & { password?: string; email?: string; name?: string };\n\n  if (patch.password || patch.email) {\n    const { error: uErr } = await supabaseAdmin!.auth.admin.updateUserById(id, { password: patch.password, email: patch.email });\n    if (uErr) return res.status(500).json({ error: uErr.message } as ApiError);\n  }\n\n  const update: any = {};\n  if (patch.role) update.role = patch.role;\n  if (typeof patch.active === 'boolean') update.active = patch.active;\n  if (patch.name) update.name = patch.name;\n  if (patch.email) update.email = patch.email;\n\n  if (Object.keys(update).length) {\n    const { error: pErr } = await supabaseAdmin!.from('user_profiles').update(update).eq('user_id', id);\n    if (pErr) return res.status(500).json({ error: pErr.message } as ApiError);\n  }\n\n  const { data } = await supabaseAdmin!.from('user_profiles').select('*').eq('user_id', id).single();\n  const user: User = { id, username: data?.name ?? '', name: data?.name ?? '', email: data?.email ?? '', role: data?.role, active: data?.active };\n  res.json(user);\n};\n\nexport const adminDeleteUser: RequestHandler = async (req, res) => {\n  const token = extractToken(req.headers.authorization);\n  const manager = requireManager(token);\n  if (!manager) return res.status(403).json({ error: 'Forbidden' } as ApiError);\n  if (!ensureSupabase(res)) return;\n\n  const id = req.params.id;\n  const { error } = await supabaseAdmin!.auth.admin.deleteUser(id);\n  if (error) return res.status(500).json({ error: error.message } as ApiError);\n  await supabaseAdmin!.from('user_profiles').delete().eq('user_id', id);\n  res.status(204).end();\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { loginHandler, logoutHandler, meHandler } from \"./routes/auth\";\nimport { createUserHandler, deleteUserHandler, listUsersHandler, updateUserHandler } from \"./routes/users\";\nimport { adminCreateUser, adminDeleteUser, adminListUsers, adminUpdateUser } from \"./routes/admin-users\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Auth\n  app.post(\"/api/auth/login\", loginHandler);\n  app.get(\"/api/auth/me\", meHandler);\n  app.post(\"/api/auth/logout\", logoutHandler);\n\n  // Users (legacy in-memory)\n  app.get(\"/api/users\", listUsersHandler);\n  app.post(\"/api/users\", createUserHandler);\n  app.put(\"/api/users/:id\", updateUserHandler);\n  app.delete(\"/api/users/:id\", deleteUserHandler);\n\n  // Users (Supabase admin)\n  app.get(\"/api/admin/users\", adminListUsers);\n  app.post(\"/api/admin/users\", adminCreateUser);\n  app.put(\"/api/admin/users/:id\", adminUpdateUser);\n  app.delete(\"/api/admin/users/:id\", adminDeleteUser);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["users","app","express"],"mappings":"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"}